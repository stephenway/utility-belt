// color.scss
// ==========

/* hex( <$color> ) */
@function rgb-to-hex($color) {
  @return mix($color);
}

/* rgba-to-hex( <$color>, <$background> ) */
@function rgba-to-hex($color, $background) {
  @return mix(rgba($color,1), $background, percentage(alpha($color)));
}

/* alpha-attribute
   http://thesassway.com/intermediate/mixins-for-semi-transparent-colors/ */
@mixin alpha-attribute($attribute, $color, $background: white) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  @if ($percent < 100%) { #{$attribute}: $solid-color; }
  #{$attribute}: $color;
}

// background-color contrast function
// http://codepen.io/bluesaunders/details/FCLaz
$dark-text-default: #000 !default;
$light-text-default: #fff !default;

// For loop inumerator
$num: 0;

// Calculeate brightness of a given color.
@function brightness($color) {
  @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%;
}

// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
@function color-contrast($color, $dark: $dark-text-default, $light: $light-text-default) {
  @if $color == null {
    @return null;
  }
  @else {
    $color-brightness: brightness($color);  
    $light-text-brightness: brightness($light);
    $dark-text-brightness: brightness($dark);
    
    @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);  
  }
}
